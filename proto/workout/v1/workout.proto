syntax = "proto3";
option go_package = "./generated";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "validate/validate.proto";

service ExerciseService {
  rpc GetExercises(GetExercisesRequest) returns (GetExercisesResponse) {
    option (google.api.http) = {
      get: "/v1/exercises"
    };
  }
}

message GetExercisesRequest {
  optional string muscle_group_filter = 1;
  optional string category_filter = 2;
}

message GetExercisesResponse {
  repeated Exercise exercises = 1;
}

message Exercise {
  string id = 1;
  string name = 2;
  string description = 3;
  string muscle_group = 4;
  string category = 5;
}

service WorkoutService {
  //workout API
  rpc CreateWorkout(CreateWorkoutRequest) returns (CreateWorkoutResponse) {
    option (google.api.http) = {
      post: "/v1/workouts"
      body: "workout"
    };
  }
  rpc GetWorkout(GetWorkoutRequest) returns (GetWorkoutResponse) {
    option (google.api.http) = {
      get: "/v1/workouts/{id}"
      response_body: "workout"
    };
  }
  rpc UpdateWorkout(UpdateWorkoutRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/v1/workouts/{workout.id}"
      body: "workout"
    };
  }
  rpc ListWorkouts(google.protobuf.Empty) returns (ListWorkoutsResponse) {
    option (google.api.http) = {
      get: "/v1/workouts"
      //using wrapper around workouts here to avoid null JSON response due to EmitUnpopulated: false
    };
  }
  rpc DeleteWorkout(DeleteWorkoutRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/workouts/{id}"
    };
  }
}

message CreateWorkoutRequest {
  Workout workout = 1;
}

message CreateWorkoutResponse {
  string id = 1;
}

message GetWorkoutRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetWorkoutResponse {
  Workout workout = 1;
}

message UpdateWorkoutRequest {
  Workout workout = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message ListWorkoutsResponse {
  repeated Workout workouts = 1;
}

message DeleteWorkoutRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message Workout {
  // Output only.
  string id = 1 [
    (validate.rules).string.uuid = true,
    (validate.rules).string.ignore_empty = true
  ];
  string name = 2 [(validate.rules).string.min_len = 1];
  optional string comment = 3;
  repeated WorkoutExercise exercises = 4;
}

message WorkoutExercise {
  string workout_exercise_id = 1 [
    (validate.rules).string.uuid = true,
    (validate.rules).string.ignore_empty = true //omitted when update
  ];
  string workout_id = 2 [
    (validate.rules).string.uuid = true,
    (validate.rules).string.ignore_empty = true //omitted when update
  ];
  string exercise_id = 3 [(validate.rules).string.uuid = true];
  int32 order = 4 [(validate.rules).int32.gt = 0];
  int32 repetitions = 5 [(validate.rules).int32.gt = 0];
  int32 sets = 6 [(validate.rules).int32.gt = 0];
  optional int32 weight = 7 [(validate.rules).int32.gt = 0];
  optional string comment = 8;
}
